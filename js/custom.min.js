$(function () {
	// sliderInit()	
	// imgRevealer()
	// searchPopup()
	replaceHash()
	lenisSetup()
})

$(window).on('load', function () {
	if ($(".preLoader")) {
		preLoader();
	} else {}
})

function preLoader() {
	const tl = gsap.timeline({
		duration: 0.1
	});
	tl.to('.preLoader.black > img', {
			delay: 1,
			y: 50,
			autoAlpha: 0
		})
		.to('.preLoader.black', {
			yPercent: -100
		})
		.to('.preLoader.white', {
			yPercent: -100
		})
		.to('.preLoader', {
			css: {
				display: 'none'
			}
		})
		.from('.navbar-brand > img', {
			x: -50,
			autoAlpha: 0
		})
		.from(
			'.navbar-nav > li, .form-inline a', {
				autoAlpha: 0,
				x: 100,
				stagger: 0.05
			},
			'>-0.5'
		)
		.from('.slideOne', {
			autoAlpha: 0,
			yPercent: 100,
			stagger: 0.05
		})
		.from(
			'.bg-image', {
				autoAlpha: 0
			},
			'<-0.25'
		);
}

function lenisSetup() {
	const lenis = new Lenis({
		duration: 1.5,
		easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
		smooth: true,
		mouseMultiplier: 1,
	});

	function raf(time) {
		lenis.raf(time);
		requestAnimationFrame(raf);
	}
	requestAnimationFrame(raf);
	document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
		anchor.addEventListener("click", function (e) {
			e.preventDefault();
			lenis.scrollTo(this.getAttribute("href"));
		});
	});
	lenis.scrollTo("top");
}

function replaceHash() {
	document.querySelectorAll("a").forEach((a) => {
		let href = a.getAttribute("href");
		a.href = href ?
			href.startsWith("#") && href.endsWith("#") ?
			href.replace("#", "javascript:void(0)") :
			href :
			"javascript:void(0)";
	});
}

function searchPopup() {
	const search = document.querySelector(".searchPopup");
	const closeButtons = document.querySelectorAll('.searchPopup, .searchPopup .close');
	document.querySelector('a[href="#searchBtn"]').addEventListener('click', e => {
		e.preventDefault();
		search.classList.add('open');
		search.querySelector('input[type="search"]').focus();
	});
	closeButtons.forEach(el => {
		el.addEventListener('click', e => {
			const isCloseButton = e.target === el.querySelector('.close') || e.keyCode === 27;
			if (el.contains(e.target) || isCloseButton) search.classList.remove('open');
		});
	});
}

function sliderInit() {
	const swiperOptions = {
		loop: true,
		speed: 1000,
		parallax: true,
		autoplay: {
			delay: 3500,
			disableOnInteraction: false,
		},
		autoplay: false,
		grabCursor: false,
		pagination: {
			el: '.swiper-pagination',
			clickable: true
		},
		navigation: {
			nextEl: '.swiper-button-next',
			prevEl: '.swiper-button-prev'
		}
	};
	var bannerSlider = new Swiper('.bannerSlider', swiperOptions);
	var pageSections = document.querySelectorAll('.bannerImg');
	pageSections.forEach(function (pageSection) {
		var backgroundUrl = pageSection.getAttribute('data-background');
		if (backgroundUrl) {
			pageSection.style.backgroundImage = 'url(' + backgroundUrl + ')';
		}
	});

	var logoSlider = new Swiper('.logoSlider', {
		loop: true,
		autoplay: true,
		slidesPerView: 1,
		spaceBetween: 10,
		centeredSlides: true,
		roundLengths: true,
		breakpoints: {
			1199: {
				slidesPerView: 5,
				spaceBetween: 10
			},
			768: {
				slidesPerView: 4,
				spaceBetween: 10
			},
			576: {
				slidesPerView: 3,
				spaceBetween: 10
			},
			375: {
				slidesPerView: 2,
				spaceBetween: 10
			}
		},
	});

	var industrySlider = new Swiper('.industrySlider', {
		loop: true,
		slidesPerView: 4,
		spaceBetween: 20,
		breakpoints: {
			1024: {
				slidesPerView: 4,
				spaceBetween: 20
			},
			768: {
				slidesPerView: 1,
				spaceBetween: 20
			},
			640: {
				slidesPerView: 1,
				spaceBetween: 10
			},
			576: {
				slidesPerView: 1,
				spaceBetween: 10
			},
			375: {
				slidesPerView: 1,
				spaceBetween: 10
			}
		},
		navigation: {
			nextEl: '.swiper-button-next',
			prevEl: '.swiper-button-prev'
		},
		scrollbar: {
			el: '.swiper-scrollbar'
		}
	});
}

function imgRevealer() {
	let revealContainers = document.querySelectorAll('.reveal');
	revealContainers.forEach((container) => {
		let image = container.querySelector('img');
		let revelerTl = gsap.timeline({
			scrollTrigger: {
				trigger: container,
				toggleActions: 'restart none none reverse'
			}
		});
		revelerTl.set(container, {
			autoAlpha: 1
		});
		revelerTl.from(container, 0.75, {
			xPercent: -100,
			ease: Power2.out
		});
		revelerTl.from(image, 0.75, {
			xPercent: 100,
			scale: 1.3,
			delay: -0.75,
			ease: Power2.out
		});
	});
}

const canvas = document.querySelector("canvas");
const context = canvas.getContext("2d");

const frames = {
	currentIndex: 0,
	maxIndex: 538
}
const images = [];
let imagesLoaded = 0;


function preloadImages() {
	for (var i = 1; i <= frames.maxIndex; i++) {
		const imageUrl = `images/sequence-4/frame_${i.toString().padStart(4, "0")}.jpeg`
		const img = new Image()
		img.src = imageUrl;

		img.onload = function () {
			imagesLoaded++;
			if (imagesLoaded === frames.maxIndex) {
				loadImage(frames.currentIndex)
				startAnimation();
			}
		}

		images.push(img);
	}
}

function loadImage(index) {
	if (index >= 0 && index <= frames.maxIndex) {
		const img = images[index];
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;

		const scaleX = canvas.width / img.width;
		const scaleY = canvas.height / img.height;
		const scale = Math.max(scaleX, scaleY);

		const newWidth = img.width * scale;
		const newHeight = img.height * scale;

		const offsetX = (canvas.width - newWidth) / 2;
		const offsetY = (canvas.height - newHeight) / 2;

		context.clearRect(0, 0, canvas.width, canvas.height);
		context.imageSmoothingEnabled = true;
		context.imageSmoothingQuality = "high";
		context.drawImage(img, offsetX, offsetY, newWidth, newHeight);

		frames.currentIndex = index;
	}
}

function startAnimation() {
	var tl = gsap.timeline({
		scrollTrigger: {
			trigger: ".main-banner",
			start: "top top",
			pin: true,
			scrub: 2,
			end: "bottom bottom",
		}
	})
	tl.to(frames, {
		currentIndex: frames.maxIndex,
		onUpdate: function () {
			loadImage(Math.floor(frames.currentIndex))
		}
	})
}

window.addEventListener("resize", function() {
	loadImage(Math.floor(frames.currentIndex));
})

preloadImages()